#include "Math/gfpMatrix.h"
using namespace std;
using Eigen::Matrix, Eigen::Vector;
namespace hmmpc
{
#if defined(PR_31) && !defined(PR_61)
//* PR = 2^{31}-1
static Vector<gfpScalar, 2> constOr1Bits {2147483646, 1};
// f(1)=0, f(2)=1, f(3)=1
static Vector<gfpScalar, 3> constOr2Bits {2147483645, 1073741826, 1073741823};
static Vector<gfpScalar, 4> constOr3Bits {2147483644, 1431655769, 1073741822, 1789569706};
static Vector<gfpScalar, 5> constOr4Bits {2147483643, 178956977, 1521134247, 1968526677, 626349397};
static Vector<gfpScalar, 6> constOr5Bits {2147483642, 1932735291, 1789569701, 2058005163, 357913941, 304226850};
static Vector<gfpScalar, 7> constOr6Bits {2147483641, 1181116017, 1049880887, 671088642, 74565404, 1369020825, 2096779172};
static Vector<gfpScalar, 8> constOr7Bits {2147483640, 122713365, 417566255, 310192086, 909697933, 1553943028, 1893961272, 1234377009};
static Vector<gfpScalar, 9> constOr8Bits {2147483639, 1480229816, 991293778, 28334859, 716200708, 1366038209, 862721729, 1420364432, 1724751065};

// f(1)=0, f(2)=1
static Vector<gfpScalar, 2> constAnd1Bits {2147483646, 1};
// f(1)=0, f(2)=0, f(3)=1
static Vector<gfpScalar, 3> constAnd2Bits {1, 1073741822, 1073741824};
static Vector<gfpScalar, 4> constAnd3Bits {2147483646, 357913943, 2147483646, 1789569706};
static Vector<gfpScalar, 5> constAnd4Bits {1, 1252698792, 1700091222, 1968526676, 1521134250};
static Vector<gfpScalar, 6> constAnd5Bits {2147483646, 1753778314, 268435454, 89478486, 1879048191, 304226850};
static Vector<gfpScalar, 7> constAnd6Bits {1, 751619274, 739688814, 1386916521, 283348537, 1082689672, 50704475};
static Vector<gfpScalar, 8> constAnd7Bits {2147483646, 1089080995, 1515169015, 1786587091, 835132529, 184922203, 1944665747, 1234377009};
static Vector<gfpScalar, 9> constAnd8Bits {1, 789967196, 1573756124, 281857227, 193497225, 187904819, 1031239543, 1961496224, 422732582};

static Vector<gfpScalar, 17> constAnd16Bits {
    1, 1366869524, 898997883, 882203628, 469464442, 1244796818, 966139079, 1443938264, 975111214, 252205337, 1909714232, 1068090755, 836829403, 1514608695, 2073872857, 1890963382, 1533547309
};

static Vector<gfpScalar, 33> constAnd32Bits {
    1, 1618843883, 489735049, 1182983401, 505227199, 59713576, 2010253104, 638793373, 293690690, 2002692183, 1134412297, 1874182322, 1224085901, 503474299, 432088043, 1982756836, 1860867313, 1159601743, 1460510234, 1349038389, 615027772, 250794342, 1571647141, 248716233, 253242131, 363353216, 1583218092, 1198742991, 1364732016, 1365136495, 226096170, 307304054, 1081294216
};

// f(1)=0, f(2)=1, ..., f(9)=0
static Vector<gfpScalar, 9> constXor8Bits {
    2147483392, 511306287, 2140665578, 954437524, 1002158929, 954437196, 1574821339, 1874787311, 1724804326
};

#elif !defined(PR_31) && defined(PR_61)
//* PR = 2^{61}-1
// The first is the free coeffient.
// f(1)=0, f(2)=1
static Vector<gfpScalar, 2> constOr1Bits {2305843009213693950, 1};
// f(1)=0, f(2)=1, f(3)=1
static Vector<gfpScalar, 3> constOr2Bits {2305843009213693949, 1152921504606846978, 1152921504606846975};
static Vector<gfpScalar, 4> constOr3Bits {2305843009213693948, 1537228672809129305, 1152921504606846974, 1921535841011411626};
static Vector<gfpScalar, 5> constOr4Bits {2305843009213693947, 192153584101141169, 1633305464859699879, 2113689425112552789, 672537544353994069};
static Vector<gfpScalar, 6> constOr5Bits {2305843009213693946, 691752902764108194, 1921535841011411621, 2209766217163123371, 384307168202282325, 1710166898500156347};
static Vector<gfpScalar, 7> constOr6Bits {2305843009213693945, 807045053224792894, 204963823041217233, 720575940379279362, 80063993375475484, 1931143520216468684, 867893688190154251};
static Vector<gfpScalar, 8> constOr7Bits {2305843009213693944, 592931059512092744, 448358362902662703, 794234814284716809, 976780719180800909, 1207365020102170305, 2033625431737077304, 864233619921561086};
static Vector<gfpScalar, 9> constOr8Bits {2305843009213693943, 667047441951104338, 142056399674772204, 1413930123010897060, 2152520461899658397, 83266553110494504, 1848677607039728935, 141598891141198071, 468431549813228352};

// f(1)=0, f(2)=1
static Vector<gfpScalar, 2> constAnd1Bits {2305843009213693950, 1};
// f(1)=0, f(2)=0, f(3)=1
static Vector<gfpScalar, 3> constAnd2Bits {1, 1152921504606846974, 1152921504606846976};
static Vector<gfpScalar, 4> constAnd3Bits {2305843009213693950, 384307168202282327, 2305843009213693950, 1921535841011411626};
static Vector<gfpScalar, 5> constAnd4Bits {1, 1345075088707988136, 1825459048960841046, 2113689425112552788, 1633305464859699882};
static Vector<gfpScalar, 6> constAnd5Bits {2305843009213693950, 499599318662967025, 288230376151711742, 96076792050570582, 2017612633061982207, 1710166898500156347};
static Vector<gfpScalar, 7> constAnd6Bits {1, 2190550858753009251, 1716572017970194388, 1489190276783844009, 304243174826806841, 2084866387497381614, 1437949321023539700};
static Vector<gfpScalar, 8> constAnd7Bits {2305843009213693950, 2091729015500993801, 243394539861445470, 73658873905437447, 896716725805325425, 1582064509099395572, 1165731743546923053, 864233619921561086};
static Vector<gfpScalar, 9> constAnd8Bits {1, 2231726626774682357, 306301963227890499, 1686147700487513700, 1130103266494836463, 1124098466991675801, 184947824697348369, 722634728780363015, 1837411459400465599};

static Vector<gfpScalar, 17> constAnd16Bits {
    1,
    13210158986906621,
    1038267752230061411,
    1391354728666320313,
    939305137264390189,
    484851853932239774,
    372390200152221647,
    2240689514598169061,
    1044837920010153703,
    1881558796282845959,
    643284461892318797,
    2174861157347573465,
    1110562418029546732,
    133829224598803978,
    631076825419136256,
    2055938107048763600,
    2290725817250100101
};

static Vector<gfpScalar, 33> constAnd32Bits{
    1,
    376300429167070996,
    1039067591010351164,
    1750157743311560858,
    1215349732825413501,
    1075374854411815938,
    2109100797463810956,
    343894134821539264,
    2274659198959153634,
    474291221788417391,
    31861669946813256,
    1303650878907964256,
    1771541281447434351,
    1167585126900815599,
    329273040347515713,
    1741856414697254047,
    365979142519753195,
    959180596183412313,
    1762775212484815413,
    219312036616237419,
    1551988720380523314,
    1175658431423818493,
    561068005012427956,
    1103525908626114160,
    555509603788317132,
    1003480322170635148,
    78207816960425127,
    531036009630603814,
    124672908622142349,
    1742797652187386168,
    732211398302546091,
    19877799044364801,
    484713439817567545
};


static Vector<gfpScalar, 9> constXor8Bits {
    2305843009213693696,
    549010240288975407,
    1376185668991029380,
    1024819115206086548,
    614891469123651614,
    1024819115206086220,
    307445734561825858,
    2013037547726240751,
    7320136537186330
};

#endif
gfpVector getFuncOrConsts(size_t degree);
gfpVector getFuncAndConsts(size_t degree);
gfpVector getFuncXorConsts(size_t degree);

inline gfpVector getFuncConsts(string fn, size_t degree)
{
    if(fn=="OR"){return getFuncOrConsts(degree);}
    else if(fn=="AND"){return getFuncAndConsts(degree);}
    else if(fn=="XOR"){return getFuncXorConsts(degree);}
}

inline gfpVector getFuncOrConsts(size_t degree)
{
    switch (degree)
    {
    case 8:
        return constOr8Bits;
        break;
    
    case 7:
        return constOr7Bits;
        break;
    
    case 6:
        return constOr6Bits;
        break;
    
    case 5:
        return constOr5Bits;
        break;
    
    case 4:
        return constOr4Bits;
        break;
    
    case 3:
        return constOr3Bits;
        break;
    
    case 2:
        return constOr2Bits;
        break;

    case 1:
        return constOr1Bits;
        break;
    
    default://<8
        assert(false);
        break;
    }
}

inline gfpVector getFuncAndConsts(size_t degree)
{
    switch (degree)
    {
    case 32:
        return constAnd32Bits;
        break;
    case 16:
        return constAnd16Bits;
        break;
    case 8:
        return constAnd8Bits;
        break;
    
    case 7:
        return constAnd7Bits;
        break;
    
    case 6:
        return constAnd6Bits;
        break;
    
    case 5:
        return constAnd5Bits;
        break;
    
    case 4:
        return constAnd4Bits;
        break;
    
    case 3:
        return constAnd3Bits;
        break;
    
    case 2:
        return constAnd2Bits;
        break;

    case 1:
        return constAnd1Bits;
        break;
    
    default:
        assert(false);
        break;
    }
}

inline gfpVector getFuncXorConsts(size_t degree)
{
    switch (degree)
    {
    case 8:
        return constXor8Bits;
        break;
    
    default:
        assert(false);
        break;
    }
}

}